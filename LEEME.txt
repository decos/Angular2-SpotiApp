4. APLICACIÓN #2: SpotiApp

	INICIANDO EL PROYECTO
		- Recursos: 
			https://developer.spotify.com/
			
		- Algunos servicios requieren autenticación, los que usaremos no
			https://developer.spotify.com/web-api/console/
			
		- Search for an Item:
			https://developer.spotify.com/web-api/console/get-search-item/
			
		- Crear el proyecto 
			ng new SpotiApp
			ng serve
			
		1. Ir a la pagina de Bootstrap
			https://v4-alpha.getbootstrap.com/
			
		2. Copiar el CDN en el index.html del proyecto
		
		3. Crear el directorio "components" dentro del directorio "app"
		
		4. Crear el componente "home" por la consola
			ng g c components/home
			
			- Quitar el estilo y el spec, modificar .ts
			
		5. Crear el componente "search" por la consola
			ng g c components/search
		
			- Quitar el estilo y el spec, modificar .ts
		
		6. Realizar dos configuraciones en el "tsconfig.json" para que compile el proyecto más rápido
			
			"exclude": [
				"../node_modules"
			],
			"compileOnSave": false,
		
		7. Crear el directorio "shared" dentro del directorio "components"
		
		8. Crear el componente navbar
			ng g c components/shared/navbar
			
		9. Agregar lo siguiente a la vista del componente "navbar"
			https://v4-alpha.getbootstrap.com/components/navbar/
		
			MODIFICAR:
			<nav class="navbar navbar-toggleable-md navbar-inverse bg-inverse bg-faded">
			
		10. Agregar en "assets" el directorio "img" de los recursos del proyecto
		
		11. Reemplazar en estilo "src\styles.css" con el estilo de los recursos del proyecto
		
		
	CREANDO LAS RUTAS DE NUESTRA APLICACIÓN
		
		1. Creando el fichero "app.routes.ts" en el directorio "app"
		
		2. Codear lo siguiente: 
			ng2-routes
			ng2-import 
		
		3. Agregar "useHash:true"
		
		4. Importar APP_ROUTING en el fichero "app.module.ts"
		
		5. Agregar APP_ROUTING en "imports"
		
		6. Agregar el siguiente tag en la vista del componente "app"
			<router-outlet></router-outlet>
		
		7. Agregar a la vista del componente navbar el
			routerLink y routerLinkActive
		
	
	BOOTSTRAP 4: SLIDESHOW Y DETALLES EN EL HomeComponent
	
		1. Copiar carousel (bootstrap) con barritas en la vista "home"
			https://v4-alpha.getbootstrap.com/components/carousel/
		
		2. Eliminar la etiqueta "container" de la vista "app"
		
		- Se agregaron comentarios en src\styles.css
		
		3. Agregar en la vista del componente "home" lo siguiente:
			- style="background-image:url('assets/img/ed-sheeran.jpg')"
			- <div class="container">
			
		4. Para que el contenedor no este pegado al Carousel, añadir:
			<div class="container top-30">
			
			Y añadir un nuevo estilo en "styles.css"
			
			.top-30 {
			  margin-top: 30px;
			}
		
	
	HTTP - SERVICE: CONECTÁNDONOS A SPOTIFY
		1. Crear el directorio "services" y ejecutar en consola lo sgte:
			ng g s services/spotify
		
		2. Codear la clase SpotifyService
		
	
	ACTUALIZACIÓN Token para uso de servicios Spotify
		
		1. Crear una cuenta en SpotifyDeveloper
		
		2. Crear una Aplicación
		
		3. Revisar la siguiente guía:
			https://developer.spotify.com/web-api/authorization-guide/
			(Client Credentials Flow) ya que sera lo que usemos
			
		4. Para obtener un TOKEN debemos usar la aplicación creada
		
			PETICION:
			
			POST https://accounts.spotify.com/api/token
			x-www-form-urlencoded
			
			Authorization:Basic ZWM0NzI4NzE4MDZjNDI3ZTkyNDhlYTQ0ZGZiMWYyMmY6MjU3NTBiZDUwMDk1NDY2YWE3OTY2NWVlNjI3ZTY3MGY=
			
			client_id:ec472871806c427e9248ea44dfb1f22f
			client_secret:25750bd50095466aa79665ee627e670f
			grant_type:client_credentials
			
			RESULTADO: 
			
			{
				"access_token": "BQCfsKMqglck1vdEritK5WlTzmZNemGZtVM38oaQXzsaIkuGYy-RAXPUjYvE33ERERal6TQ_0_jzuiFoPkgc0Q",
				"token_type": "Bearer",
				"expires_in": 3600
			}
					
		5. Hacer uso del TOKEN, ejemplo
			
			PETICION:
			GET https://api.spotify.com/v1/tracks/3n3Ppam7vgaVa1iaRUc9Lp
			
			Authorization:Bearer  BQCfsKMqglck1vdEritK5WlTzmZNemGZtVM38oaQXzsaIkuGYy-RAXPUjYvE33ERERal6TQ_0_jzuiFoPkgc0Q
	
		6. Importar HEADERS al servicio y modificar la lógica en el método getArtistas()

	
	
	
	
	
	
	
		
		
		
		
		